options:
  parameters:
    author: Barry Duggan
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: NB FM receiver
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: NFM_rcv
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: NFM_rcv
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 12.0]
    rotation: 0
    state: enabled

blocks:
- name: channel_filter
  id: variable_band_pass_filter_taps
  parameters:
    beta: '6.76'
    comment: ''
    gain: '1.0'
    high_cutoff_freq: '3000'
    low_cutoff_freq: '-3000'
    samp_rate: samp_rate
    type: complex_band_pass
    width: '200'
    win: window.WIN_BLACKMAN
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [368, 12.0]
    rotation: 0
    state: true
- name: rf_decim
  id: variable
  parameters:
    comment: ''
    value: '3'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 12.0]
    rotation: 0
    state: true
- name: rxBaseband
  id: variable
  parameters:
    comment: ''
    value: 437.8e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 68.0]
    rotation: 0
    state: enabled
- name: rxGain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Rx Gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '100'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 12.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '576000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 12.0]
    rotation: 0
    state: enabled
- name: sq_lvl
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Squelch
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-100'
    step: '5'
    stop: '0'
    value: '-50'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 12.0]
    rotation: 0
    state: enabled
- name: txBaseband
  id: variable
  parameters:
    comment: ''
    value: 145.83e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 124.0]
    rotation: 0
    state: enabled
- name: volume
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Volume
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.05'
    stop: '1.00'
    value: '0.05'
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 12.0]
    rotation: 0
    state: enabled
- name: analog_nbfm_rx_0
  id: analog_nbfm_rx
  parameters:
    affinity: ''
    alias: ''
    audio_rate: '48000'
    comment: ''
    max_dev: 5e3
    maxoutbuf: '0'
    minoutbuf: '0'
    quad_rate: (int)(samp_rate/rf_decim)
    tau: 75e-6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [808, 204.0]
    rotation: 0
    state: enabled
- name: analog_simple_squelch_cc_0
  id: analog_simple_squelch_cc
  parameters:
    affinity: ''
    alias: ''
    alpha: '1'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold: sq_lvl
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 220.0]
    rotation: 0
    state: enabled
- name: audio_sink_0
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: ''
    num_inputs: '1'
    ok_to_block: 'False'
    samp_rate: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1184, 228.0]
    rotation: 0
    state: enabled
- name: blocks_message_strobe_0
  id: blocks_message_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: pmt.intern("TEST")
    period: '500'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [88, 452.0]
    rotation: 0
    state: enabled
- name: blocks_msgpair_to_var_1
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: rxBaseband
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 460.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: Volume
    const: volume
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1016, 228.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\nimport numpy as np\nfrom\
      \ gnuradio import gr\nimport pmt\n\nfrom skyfield.api import load, wgs84\nimport\
      \ serial\nimport time\n\nclass rigControl:\n    def __init__(self,lat,lon,satNum):\n\
      \        self.ts = load.timescale()\n\n        self.gs = wgs84.latlon(lat,lon)\n\
      \n        satellites = load.tle_file(\"/home/radsat-gs/Desktop/austinsWorkspace/ground_station/src/active.txt\"\
      )\n        print(\"Loaded %s satellites\" % len(satellites))\n\n        catalog\
      \ = {sat.model.satnum: sat for sat in satellites}\n        self.satellite =\
      \ catalog[satNum]\n        print(self.satellite)\n\n    def getAzEl(self):\n\
      \        dist = self.satellite - self.gs\n        position = dist.at((self.ts).now())\n\
      \n        el, az, _ = position.altaz()\n\n        return az.degrees, el.degrees\n\
      \n    def isPass(self):\n        _, el = self.getAzEl()\n\n        if el > 5:\n\
      \            return True\n        else:\n            return False\n\n    def\
      \ getDoppler(self,UL_FREQ,DL_FREQ,updateFiles = True):\n        dt = 1/86400\n\
      \        t1 = (self.ts).now() - dt\n        t2 = (self.ts).now()\n        t3\
      \ = (self.ts).now() + dt\n\n        comp1 = self.satellite.at(t1) - self.gs.at(t1)\n\
      \        comp2 = self.satellite.at(t2) - self.gs.at(t2)\n        comp3 = self.satellite.at(t3)\
      \ - self.gs.at(t3)\n\n        dists = [comp1.distance().m,comp2.distance().m,comp3.distance().m]\n\
      \        satRate = (np.gradient(dists))[2]\n\n        ul_doppler = satRate *\
      \ UL_FREQ / 299792458\n        dl_doppler = satRate * DL_FREQ / 299792458\n\
      \ \n        print(\"Sat Rate:\",satRate)\n\n        print('UL Doppler: {:.1f}\
      \ Hz'.format(ul_doppler))\n        print('DL Doppler: {:.1f} Hz'.format(dl_doppler))\n\
      \n        if comp3.distance().m <= comp1.distance().m: # Approaching\n     \
      \       UL_FREQ_shifted = UL_FREQ - ul_doppler\n            DL_FREQ_shifted\
      \ = DL_FREQ + dl_doppler\n            print(\"Approaching\")\n\n        elif\
      \ comp3.distance().m > comp1.distance().m: # Leaving\n            UL_FREQ_shifted\
      \ = UL_FREQ + ul_doppler\n            DL_FREQ_shifted = DL_FREQ - dl_doppler\n\
      \            print(\"Leaving\")        \n\n        if updateFiles:\n       \
      \     timeTime = time.time()\n            with open(\"ul_doppler.txt\",\"w\"\
      ) as ul, open(\"dl_doppler.txt\",\"w\") as dl:\n                ul.write(str(timeTime)\
      \ + \" \" + str(ul_doppler))\n                dl.write(str(timeTime) + \" \"\
      \ + str(dl_doppler))\n                print()\n\n\n        return UL_FREQ_shifted,\
      \ DL_FREQ_shifted\n\n    def getPassTimes(self, year, month, day, el = 5):\n\
      \        start = self.ts.utc(year,month,day)\n        stop  = self.ts.utc(year,month,day\
      \ + 1)\n\n        t,events = self.satellite.find_events(self.gs,start,stop,altitude_degrees\
      \ = 5.0)\n        eventNames = 'rise above %s\xB0' % el, 'culminate', 'set below\
      \ 5\xB0'\n        for ti, event in zip(t, events):\n            name = eventNames[event]\n\
      \            print(ti.utc_strftime('%Y %b %d %H:%M:%S'), name)\n\n        return\
      \ t,events\n\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n    \"\"\"Embedded Python Block example - a simple\
      \ multiply const\"\"\"\n\n    def __init__(self, upBaseFreq=100e6, dnBaseFreq=100e6,\
      \ gsLat=52.144176, gsLon=-106.612910, noradId=25544):\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Doppler Block',   # will show up in GRC\n\
      \            in_sig=None,\n            out_sig=None\n        )\n        \n \
      \       self.uplinkFreq = upBaseFreq\n        self.dnlinkFreq = dnBaseFreq\n\
      \        self.controller = rigControl(gsLat, gsLon, noradId)\n        \n   \
      \     # Register message ports\n        self.message_port_register_out(pmt.intern('uplk_freq_msg'))\n\
      \        self.message_port_register_out(pmt.intern('dnlk_freq_msg'))\n     \
      \   self.message_port_register_out(pmt.intern('pass_msg'))\n        self.message_port_register_in(pmt.intern('update_msg'))\n\
      \        self.set_msg_handler(pmt.intern('update_msg'), self.sendInfo)\n   \
      \     \n    def sendInfo(self, msg):\n        upFreq, dnFreq = self.controller.getDoppler(self.uplinkFreq,\
      \ self.dnlinkFreq)\n        isInPass = self.controller.isPass()\n        self.message_port_pub(pmt.intern('uplk_freq_msg'),\
      \ pmt.cons(pmt.intern('value'),    pmt.to_pmt(upFreq)))\n        self.message_port_pub(pmt.intern('dnlk_freq_msg'),\
      \ pmt.cons(pmt.intern('value'),    pmt.to_pmt(dnFreq)))\n        self.message_port_pub(pmt.intern('pass_msg'),\
      \      pmt.cons(pmt.intern('pass_msg'), pmt.to_pmt(isInPass)))\n        \n \
      \   def stop(self):\n        return True\n\n"
    affinity: ''
    alias: ''
    comment: ''
    dnBaseFreq: rxBaseband
    gsLat: '52.144176'
    gsLon: '-106.61291'
    maxoutbuf: '0'
    minoutbuf: '0'
    noradId: '25544'
    upBaseFreq: txBaseband
  states:
    _io_cache: ('Doppler Block', 'blk', [('upBaseFreq', '100000000.0'), ('dnBaseFreq',
      '100000000.0'), ('gsLat', '52.144176'), ('gsLon', '-106.61291'), ('noradId',
      '25544')], [('update_msg', 'message', 1)], [('pass_msg', 'message', 1), ('dnlk_freq_msg',
      'message', 1), ('uplk_freq_msg', 'message', 1)], 'Embedded Python Block example
      - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [352, 428.0]
    rotation: 0
    state: enabled
- name: fft_filter_xxx_0_0
  id: fft_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: rf_decim
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '1'
    samp_delay: '0'
    taps: channel_filter
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 212.0]
    rotation: 0
    state: enabled
- name: qtgui_waterfall_sink_x_0
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: ''
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    int_max: '10'
    int_min: '-140'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    type: complex
    update_time: '0.10'
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [472, 308.0]
    rotation: 0
    state: true
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"RX2"'
    ant1: '"RX2"'
    ant10: '"RX2"'
    ant11: '"RX2"'
    ant12: '"RX2"'
    ant13: '"RX2"'
    ant14: '"RX2"'
    ant15: '"RX2"'
    ant16: '"RX2"'
    ant17: '"RX2"'
    ant18: '"RX2"'
    ant19: '"RX2"'
    ant2: '"RX2"'
    ant20: '"RX2"'
    ant21: '"RX2"'
    ant22: '"RX2"'
    ant23: '"RX2"'
    ant24: '"RX2"'
    ant25: '"RX2"'
    ant26: '"RX2"'
    ant27: '"RX2"'
    ant28: '"RX2"'
    ant29: '"RX2"'
    ant3: '"RX2"'
    ant30: '"RX2"'
    ant31: '"RX2"'
    ant4: '"RX2"'
    ant5: '"RX2"'
    ant6: '"RX2"'
    ant7: '"RX2"'
    ant8: '"RX2"'
    ant9: '"RX2"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: rxBaseband
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: '"serial=31E34AD"'
    dev_args: name=MyB210,product=B210
    gain0: rxGain
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: peak=0.003906
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [96, 188.0]
    rotation: 0
    state: enabled

connections:
- [analog_nbfm_rx_0, '0', blocks_multiply_const_vxx_0_0, '0']
- [analog_simple_squelch_cc_0, '0', analog_nbfm_rx_0, '0']
- [blocks_message_strobe_0, strobe, epy_block_0, update_msg]
- [blocks_multiply_const_vxx_0_0, '0', audio_sink_0, '0']
- [epy_block_0, dnlk_freq_msg, blocks_msgpair_to_var_1, inpair]
- [fft_filter_xxx_0_0, '0', analog_simple_squelch_cc_0, '0']
- [uhd_usrp_source_0, '0', fft_filter_xxx_0_0, '0']
- [uhd_usrp_source_0, '0', qtgui_waterfall_sink_x_0, '0']

metadata:
  file_format: 1
